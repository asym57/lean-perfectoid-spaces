import .bilinear_function_on_colimit
import algebraic_geometry.stalks


universes v u

open category_theory
open category_theory.instances
open algebraic_geometry
open topological_space
open topological_space.open_nhds

variables (X : Top.{v})
variables (F : presheaf_on_space (Type v) X)

instance (x : X) : has_inter (open_nhds x)·µí·µñ :=
{ inter := Œª U V, op ‚ü®(unop U).1 ‚à© (unop V).1, ‚ü®(unop U).2, (unop V).2‚ü©‚ü© }

-- Gross!
instance (x : X) (U V : (open_nhds x)·µí·µñ) : subsingleton (U ‚ü∂ V) :=
‚ü®Œª f g, begin dsimp [opposite] at U V, cases U, cases V, dsimp [(‚ü∂)] at f g, cases f, cases f, cases g, cases g, refl, end‚ü©

instance (x : X) : is_filtered' (open_nhds x)·µí·µñ :=
{ default := op ‚ü®‚ä§, set.mem_univ X‚ü©,  -- we should have a lattice structure on open_nhds x, and just use ‚ä§
  cocone_objs := Œª U V, ‚ü®U ‚à© V, ‚ü®begin /- gross!-/ dsimp [opposite] at *, cases U, cases V, dsimp [(‚ü∂)], split, split, intros x h, dsimp [(‚à©)] at h, cases h, exact h_left, end,
                                 begin /- gross!-/ dsimp [opposite] at *, cases U, cases V, dsimp [(‚ü∂)], split, split, intros x h, dsimp [(‚à©)] at h, cases h, exact h_right, end ‚ü© ‚ü© ,
  cocone_maps := Œª U V f g, ‚ü®‚ü®V, ùüô V‚ü©, begin dsimp, simp, apply subsingleton.elim end‚ü© }

def stalk_desc‚ÇÇ (Y : Type v) (x : X)
  (f : Œ† (U : (open_nhds x)·µí·µñ), ((inclusion x).op ‚ãô F).obj U ‚Üí ((inclusion x).op ‚ãô F).obj U ‚Üí Y)
  (w : Œ† (U U' : (open_nhds x)·µí·µñ) (k : U ‚ü∂ U'), (Œª a b, f U' (((inclusion x).op ‚ãô F).map k a) (((inclusion x).op ‚ãô F).map k b)) = f U)
  : F.stalk x ‚ü∂ (F.stalk x ‚ü∂ Y) :=
desc‚ÇÇ ((inclusion x).op ‚ãô F) Y f w
