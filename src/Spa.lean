import ring_theory.localization
import ring_theory.subring
import continuous_valuations
import Huber_pair

universes u‚ÇÅ u‚ÇÇ u‚ÇÉ

local attribute [instance, priority 0] classical.prop_decidable

open function Spv valuation

variables {Œì : Type*} [linear_ordered_comm_group Œì]

-- Wedhorn def 7.23.
definition Spa (A : Huber_pair) : set (Spv A) :=
{v | v.is_continuous ‚àß ‚àÄ r ‚àà A‚Å∫, v r ‚â§ 1}

lemma mk_mem_Spa {A : Huber_pair} {v : valuation A Œì} :
  mk v ‚àà Spa A ‚Üî v.is_continuous ‚àß ‚àÄ r ‚àà A‚Å∫, v r ‚â§ 1 :=
begin
  apply and_congr,
  { apply is_equiv.is_continuous_iff,
    apply out_mk, },
  { apply forall_congr,
    intro r,
    apply forall_congr,
    intro hr,
    convert (out_mk v) r 1;
    rw [valuation.map_one], }
end

namespace Spa

variable {A : Huber_pair}

instance : has_coe (Spa A) (Spv A) := ‚ü®subtype.val‚ü©

definition basic_open (r s : A) : set (Spa A) :=
{v | v r ‚â§ v s ‚àß v s ‚â† 0 }

lemma mk_mem_basic_open {r s : A} {v : valuation A Œì} {hv : mk v ‚àà Spa A} :
(‚ü®mk v, hv‚ü© : Spa A) ‚àà basic_open r s ‚Üî v r ‚â§ v s ‚àß v s ‚â† 0 :=
begin
  apply and_congr,
  { apply out_mk, },
  { apply (out_mk v).ne_zero, },
end

instance (A : Huber_pair) : topological_space (Spa A) :=
topological_space.generate_from {U : set (Spa A) | ‚àÉ r s : A, U = basic_open r s}

lemma basic_open.is_open (r s : A) : is_open (basic_open r s) :=
topological_space.generate_open.basic (basic_open r s) ‚ü®r, s, rfl‚ü©

lemma basic_open_eq (s : A) : basic_open s s = {v | v s ‚â† 0} :=
set.ext $ Œª v, ‚ü®Œª h, h.right, Œª h, ‚ü®le_refl _, h‚ü©‚ü©

-- should only be applied with (HfinT : fintype T) and (Hopen: is_open (span T))
definition rational_open (s : A) (T : finset A) : set (Spa A) :=
{v | (‚àÄ t ‚àà T, (v t ‚â§ v s)) ‚àß (v s ‚â† 0)}

lemma mk_mem_rational_open {s : A} {T : finset A} {v : valuation A Œì} {hv : mk v ‚àà Spa A} :
  (‚ü®mk v, hv‚ü© : Spa A) ‚àà rational_open s T ‚Üî (‚àÄ t ‚àà T, (v t ‚â§ v s)) ‚àß (v s ‚â† 0) :=
begin
  apply and_congr,
  { apply forall_congr,
    intro t,
    apply forall_congr,
    intro ht,
    apply out_mk, },
  { apply (out_mk v).ne_zero, },
end

definition rational_open_bInter (s : A) (T : finset A) :
  rational_open s T = (‚ãÇ t ‚àà T, basic_open t s) ‚à© {v | v s ‚â† 0} :=
begin
  ext v,
  split; rintros ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©; split; try { exact h‚ÇÇ },
  { erw set.mem_bInter_iff,
    intros t ht,
    split,
    { exact h‚ÇÅ t ht, },
    { exact h‚ÇÇ } },
  { intros t ht,
    erw set.mem_bInter_iff at h‚ÇÅ,
    exact (h‚ÇÅ t ht).1 }
end

lemma rational_open_add_s (s : A) (T : finset A) :
  rational_open s T = rational_open s (insert s T) :=
begin
  ext v,
  split; rintros ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©; split; try { exact h‚ÇÇ }; intros t ht,
  { rw finset.mem_insert at ht,
    cases ht,
    { rw ht, exact le_refl _ },
    { exact h‚ÇÅ t ht } },
  { exact h‚ÇÅ t (finset.mem_insert_of_mem ht), }
end

lemma rational_open.is_open (s : A) (T : finset A) :
  is_open (rational_open s T) :=
begin
  rw rational_open_bInter,
  apply is_open_inter,
  { apply is_open_bInter,
    { apply set.finite_mem_finset, },
    { intros,
      exact basic_open.is_open _ _ } },
  { rw ‚Üê basic_open_eq s,
    exact basic_open.is_open s s },
end

noncomputable def finset.monad : monad finset :=
  {pure := @finset.singleton, bind := Œª Œ± Œ≤, finset.bind }
local attribute [instance] finset.monad

lemma rational_open_inter.aux‚ÇÅ {s‚ÇÅ s‚ÇÇ : A} {T‚ÇÅ T‚ÇÇ : finset A}
  (h‚ÇÅ : s‚ÇÅ ‚àà T‚ÇÅ) (h‚ÇÇ : s‚ÇÇ ‚àà T‚ÇÇ) :
  rational_open s‚ÇÅ T‚ÇÅ ‚à© rational_open s‚ÇÇ T‚ÇÇ ‚äÜ
  rational_open (s‚ÇÅ * s‚ÇÇ) ((*) <$> T‚ÇÅ <*> T‚ÇÇ) :=
begin
  rintros v ‚ü®‚ü®hv‚ÇÅ, hs‚ÇÅ‚ü©, ‚ü®hv‚ÇÇ, hs‚ÇÇ‚ü©‚ü©,
  have vmuls : v (s‚ÇÅ * s‚ÇÇ) = v s‚ÇÅ * v s‚ÇÇ := valuation.map_mul _ _ _,
  split,
  { rintros t ht, --‚ü®_, ‚ü®t‚ÇÅ, ht‚ÇÅ, rfl‚ü©, t‚ÇÇ, ht‚ÇÇ, ht‚ü©,
    subst ht,
    have vmult : v (t‚ÇÅ * t‚ÇÇ) = v t‚ÇÅ * v t‚ÇÇ := valuation.map_mul _ _ _,
    rw [vmuls, vmult],
    refine le_trans (linear_ordered_comm_monoid.mul_le_mul_left  (hv‚ÇÇ _ ht‚ÇÇ) _)
                    (linear_ordered_comm_monoid.mul_le_mul_right (hv‚ÇÅ _ ht‚ÇÅ) _ ) },
  { intro H,
    rw vmuls at H,
    cases H1 : v s‚ÇÅ with Œ≥‚ÇÅ, exact hs‚ÇÅ H1,
    cases H2 : v s‚ÇÇ with Œ≥‚ÇÇ, exact hs‚ÇÇ H2,
    rw [H1,H2] at H,
    change some (Œ≥‚ÇÅ * Œ≥‚ÇÇ) = none at H,
    exact option.no_confusion H },
end

lemma rational_open_inter.aux‚ÇÇ {s‚ÇÅ s‚ÇÇ : A} {T‚ÇÅ T‚ÇÇ : finset A}
  (h‚ÇÅ : s‚ÇÅ ‚àà T‚ÇÅ) (h‚ÇÇ : s‚ÇÇ ‚àà T‚ÇÇ) :
rational_open (s‚ÇÅ * s‚ÇÇ) ((*) <$> T‚ÇÅ <*> T‚ÇÇ) ‚äÜ
rational_open s‚ÇÅ T‚ÇÅ ‚à© rational_open s‚ÇÇ T‚ÇÇ :=
begin
  rintros v ‚ü®hv,hs‚ü©,
  have vmuls : v (s‚ÇÅ * s‚ÇÇ) = v s‚ÇÅ * v s‚ÇÇ := valuation.map_mul _ _ _,
  have vs‚ÇÅne0 : v s‚ÇÅ ‚â† 0 := Œª H, by simpa only [vmuls,H,zero_mul,ne.def,eq_self_iff_true,not_true] using hs,
  have vs‚ÇÇne0 : v s‚ÇÇ ‚â† 0 := Œª H, by simpa only [vmuls,H,mul_zero,ne.def,eq_self_iff_true,not_true] using hs,
  split; split,
  { intros t ht,
    suffices H : v t * v s‚ÇÇ ‚â§ v s‚ÇÅ * v s‚ÇÇ,
    { cases H' : v s‚ÇÇ with Œ≥, exfalso; exact vs‚ÇÇne0 H',
      rw H' at H,
      have := linear_ordered_comm_monoid.mul_le_mul_right H (some (Œ≥‚Åª¬π)),
      conv at this { to_lhs, rw mul_assoc, congr, skip, change some (Œ≥ * Œ≥‚Åª¬π) },
      conv at this { to_rhs, rw mul_assoc, congr, skip, change some (Œ≥ * Œ≥‚Åª¬π) },
      simp only [mul_right_inv] at this,
      change v t * 1 ‚â§ v s‚ÇÅ * 1 at this,
      rwa [mul_one,mul_one] at this },
    { rw ‚Üêvmuls,
      rw show v t * v s‚ÇÇ = v (t * s‚ÇÇ), from (valuation.map_mul _ _ _).symm,
      refine hv (t * s‚ÇÇ) ‚ü®_,‚ü®_,ht,rfl‚ü©,_,h‚ÇÇ,rfl‚ü© } },
  { exact vs‚ÇÅne0 },
  { intros t ht,
    suffices H : v s‚ÇÅ * v t ‚â§ v s‚ÇÅ * v s‚ÇÇ,
    { cases H' : v s‚ÇÅ with Œ≥, exfalso; exact vs‚ÇÅne0 H',
      rw H' at H,
      have := linear_ordered_comm_monoid.mul_le_mul_left H (some (Œ≥‚Åª¬π)),
      conv at this { to_lhs, rw ‚Üê mul_assoc, congr, change some (Œ≥‚Åª¬π * Œ≥) },
      conv at this { to_rhs, rw ‚Üê mul_assoc, congr, change some (Œ≥‚Åª¬π * Œ≥) },
      simp only [mul_left_inv] at this,
      change 1 * v t ‚â§ 1 * v s‚ÇÇ at this,
      rwa [one_mul,one_mul] at this },
    { rw ‚Üêvmuls,
      rw show v s‚ÇÅ * v t = v (s‚ÇÅ * t), from (valuation.map_mul _ _ _).symm,
      refine hv _ ‚ü®_, ‚ü®s‚ÇÅ, h‚ÇÅ, rfl‚ü©, t, ht, rfl‚ü© } },
  { exact vs‚ÇÇne0 }
end

lemma rational_open_inter {s‚ÇÅ s‚ÇÇ : A} {T‚ÇÅ T‚ÇÇ : set A} [fintype T‚ÇÅ] [fintype T‚ÇÇ] (h‚ÇÅ : s‚ÇÅ ‚àà T‚ÇÅ) (h‚ÇÇ : s‚ÇÇ ‚àà T‚ÇÇ) :
rational_open s‚ÇÅ T‚ÇÅ ‚à© rational_open s‚ÇÇ T‚ÇÇ = rational_open (s‚ÇÅ * s‚ÇÇ) ((*) <$> T‚ÇÅ <*> T‚ÇÇ) :=
begin
  ext v, split; intro h,
  exact rational_open_inter.aux‚ÇÅ h‚ÇÅ h‚ÇÇ h,
  exact rational_open_inter.aux‚ÇÇ h‚ÇÅ h‚ÇÇ h
end

@[simp] lemma rational_open_singleton {r s : A} :
rational_open s {r} = basic_open r s :=
ext $ Œª v,
{ mp  := Œª h, ‚ü®h.left r (mem_singleton_iff.mpr rfl), h.right‚ü©,
  mpr := Œª h, ‚ü®Œª t ht,
          begin
            rw mem_singleton_iff at ht, subst ht,
            exact h.left
          end, h.right‚ü© }

@[simp] lemma basic_open_eq_univ : basic_open (1 : A) (1 : A) = univ :=
begin
  apply le_antisymm,
  { exact subset_univ _ },
  { intros v h,
    split,
    exact le_refl _,
    have v1 : v 1 = 1 := valuation.map_one _,
    rw v1,
    intro h, exact option.no_confusion h },
end

@[simp] lemma rational_open_eq_univ : rational_open (1 : A) {(1 : A)} = univ :=
by simp

def rational_basis (A : Huber_pair) : set (set (Spa A)) :=
{U : set (Spa A) | ‚àÉ {s : A} {T : set A} {h : fintype T}, U = rational_open s T }

attribute [instance] set.fintype_seq -- should move to mathlib

lemma rational_basis.is_basis : topological_space.is_topological_basis (rational_basis A) :=
begin
split,
{ rintros U‚ÇÅ ‚ü®s‚ÇÅ, T‚ÇÅ, hfin‚ÇÅ, H‚ÇÅ‚ü© U‚ÇÇ ‚ü®s‚ÇÇ, T‚ÇÇ, hfin‚ÇÇ, H‚ÇÇ‚ü© v hv,
  haveI := hfin‚ÇÅ,
  haveI := hfin‚ÇÇ,
  existsi U‚ÇÅ ‚à© U‚ÇÇ,
  rw rational_open_add_s at H‚ÇÅ H‚ÇÇ,
  split,
  { simp [H‚ÇÅ, H‚ÇÇ,rational_open_inter,-set.fmap_eq_image,-set.seq_eq_set_seq],
    exact ‚ü®_,_,by apply_instance,rfl‚ü© },
  { exact ‚ü®hv, subset.refl _‚ü© } },
split,
{ apply le_antisymm,
  { exact subset_univ _ },
  apply subset_sUnion_of_mem,
  refine ‚ü®(1 : A), {(1 : A)}, by apply_instance, by simp‚ü© },
{ apply le_antisymm,
  { unfold Spa.topological_space,
    rw generate_from_le_iff_subset_is_open,
    rintros U ‚ü®r, s, H‚ü©,
    rw [H,‚Üêrational_open_singleton],
    refine topological_space.generate_open.basic _ ‚ü®s, {r}, _, rfl‚ü©,
    exact set.fintype_singleton _ },
  { rw generate_from_le_iff_subset_is_open,
    rintros U ‚ü®s, T, hT, H‚ü©,
    subst H,
    haveI := hT,
    exact rational_open.is_open s T,
  } }
end

namespace rational_open
def presheaf.ring (s : A) := localization.away s

instance (s : A) : comm_ring (presheaf.ring s) :=
by dunfold presheaf.ring ; apply_instance

def localize (s : A) : A ‚Üí presheaf.ring s := Œª a, localization.of a 1

-- Definition of A\left(\frac T s\right) as a topological ring
def presheaf.top_ring (s : A) (T : set A) (HfinT : fintype T) :
   topological_space (presheaf.ring s) :=
 let As := presheaf.ring s in sorry
 /-let D := ring.closure ((localize s) '' A.RHuber.A‚ÇÄ ‚à™ (((Œª x, x*s‚Åª¬π) ‚àò localize s) '' T)) in
 begin
   let nhd := Œª n : ‚Ñï, mul_ideal (pow_ideal ((localize s) '' A.Rplus) n) D,
  sorry
end-/
end rational_open
end Spa

-- goal now to define the ùìû_X on *rational subsets* and then to extend.

-- to define it on rational subsets it's just a ring completion.

-- remember that a rational open is not actually `rational_open s T` in full
-- generality -- we also need that T is finite and that T generates an open ideal in A.
-- The construction on p73/74 (note typo in first line of p74 -- ideal should be I.D)
-- gives A<T/s> (need completion) and A<T/s>^+ (need integral closure).

-- Once we have this, we see mid way through p75 that the definition of the presheaf
-- on V is proj lim of O_X(U) as U runs through rationals opens in V. This gets
-- the projective limit topology and then we have a presheaf (hopefully this is
-- straightforward) of complete topological rings (need proj lim of complete is complete)

-- We then need the valuations on the stalks (this is direct limit in cat of rings, forget
-- the topology). This will be fiddly but not impossible.

-- We then have an object in V^pre and I think then everything should follow.
