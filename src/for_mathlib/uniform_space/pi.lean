import topology.uniform_space.cauchy
import topology.uniform_space.separation
noncomputable theory

local notation `ùì§` := uniformity

section
open filter lattice uniform_space
universe u
variables {Œπ : Type*} (Œ± : Œπ ‚Üí Type u) [U : Œ†i, uniform_space (Œ± i)]
include U

instance Pi.uniform_space : uniform_space (Œ†i, Œ± i) :=
‚®Üi, uniform_space.comap (Œª a, a i) (U i)

lemma pi.uniformity :
  ùì§ (Œ† i, Œ± i) = ‚®Ö i : Œπ, filter.comap (Œª a, (a.1 i, a.2 i)) $ ùì§ (Œ± i) :=
supr_uniformity

lemma pi.uniform_continuous_proj (i : Œπ) : uniform_continuous (Œª (a : Œ† (i : Œπ), Œ± i), a i) :=
begin
  rw uniform_continuous_iff,
  apply le_supr (Œª j, uniform_space.comap (Œª (a : Œ† (i : Œπ), Œ± i), a j) (U j))
end

lemma pi.uniform_space_topology :
  (Pi.uniform_space Œ±).to_topological_space = Pi.topological_space :=
to_topological_space_supr

instance pi.complete [‚àÄ i, complete_space (Œ± i)] : complete_space (Œ† i, Œ± i) :=
‚ü®begin
  intros f hf,
  have : ‚àÄ i, ‚àÉ x : Œ± i, filter.map (Œª a : Œ†i, Œ± i, a i) f ‚â§ nhds x,
  { intro i,
    have key : cauchy (map (Œª (a : Œ† (i : Œπ), Œ± i), a i) f),
      from cauchy_map (pi.uniform_continuous_proj Œ± i) hf,
    exact (cauchy_iff_exists_le_nhds $ map_ne_bot hf.1).1 key },
  choose x hx using this,
  use x,
  rw [show nhds x = (‚®Öi, comap (Œªa, a i) (nhds (x i))),
        by rw pi.uniform_space_topology ; exact nhds_pi,
      le_infi_iff],
  exact Œª i, map_le_iff_le_comap.mp (hx i),
end‚ü©

instance pi.separated [‚àÄ i, separated (Œ± i)] : separated (Œ† i, Œ± i) :=
separated_def.2 $ assume x y H,
begin
  ext i,
  apply eq_of_separated_of_uniform_continuous (pi.uniform_continuous_proj Œ± i),
  apply H,
end
end
