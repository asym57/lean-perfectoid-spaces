import category_theory.instances.Top.open_nhds
import for_mathlib.filtered
import for_mathlib.opens

universe v

open category_theory
open category_theory.instances
open topological_space
open topological_space.open_nhds

variables {X : Top.{v}}

instance (x : X) : has_inter (open_nhds x)·µí·µñ :=
{ inter := Œª U V, op ‚ü®(unop U).1 ‚à© (unop V).1, ‚ü®(unop U).2, (unop V).2‚ü©‚ü© }

-- Gross!
instance (x : X) (U V : (open_nhds x)·µí·µñ) : subsingleton (U ‚ü∂ V) :=
‚ü®Œª f g, begin dsimp [opposite] at U V, cases U, cases V, dsimp [(‚ü∂)] at f g, cases f, cases f, cases g, cases g, refl, end‚ü©

instance (x : X) : is_filtered' (open_nhds x)·µí·µñ :=
{ default := op ‚ü®‚ä§, set.mem_univ X‚ü©,  -- we should have a lattice structure on open_nhds x, and just use ‚ä§
  cocone_objs := Œª U V, ‚ü®U ‚à© V, ‚ü®begin /- gross!-/ dsimp [opposite] at *, cases U, cases V, dsimp [(‚ü∂)], split, split, intros x h, dsimp [(‚à©)] at h, cases h, exact h_left, end,
                                 begin /- gross!-/ dsimp [opposite] at *, cases U, cases V, dsimp [(‚ü∂)], split, split, intros x h, dsimp [(‚à©)] at h, cases h, exact h_right, end ‚ü© ‚ü© ,
  cocone_maps := Œª U V f g, ‚ü®‚ü®V, ùüô V‚ü©, begin dsimp, simp, apply subsingleton.elim end‚ü© }

def bar (x : X) {U : opens X} (h : x ‚àà U) : ((opens.to_Top X).obj U) := ‚ü®x, h‚ü©

-- def foo (x : X) (U : opens X) (h : x ‚àà U) : open_nhds (bar x h) ‚•§ open_nhds x :=
-- { obj := Œª V, ‚ü®‚ü®V.val.val, sorry‚ü©, sorry‚ü©,
--   map := sorry, }

variables {Y : Top.{v}} {f : X ‚ü∂ Y}

def functor.is_open_map.open_nhds.map (h : is_open_map f) (x : X) :
  open_nhds x ‚•§ open_nhds (f x) :=
{ obj := Œª U, ‚ü®(open_nhds.inclusion x ‚ãô functor.is_open_map.map h).obj U,
                set.mem_image_of_mem _ U.property‚ü©,
  map := Œª U‚ÇÅ U‚ÇÇ i, (open_nhds.inclusion x ‚ãô functor.is_open_map.map h).map i }
